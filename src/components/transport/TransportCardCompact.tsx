
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Heart, MapPin, Phone } from 'lucide-react';
import { Link } from 'react-router-dom';
import { useTranslation } from '@/hooks/use-translation';

export interface CompactTransportListing {
  id: string;
  title: string;
  price: number;
  currency: string;
  location: string;
  year: number;
  mileage?: number;
  brand: string;
  model: string;
  bodyType?: string;
  engineType?: string;
  transmission?: string;
  driveType?: string;
  condition: 'new' | 'used';
  images: string[];
  createdAt: string;
  seller: {
    name: string;
    type: 'dealer' | 'private';
  };
}

export interface TransportCardCompactProps {
  listing: CompactTransportListing;
  onFavoriteToggle?: (id: string) => void;
  isFavorite?: boolean;
}

const TransportCardCompact: React.FC<TransportCardCompactProps> = ({
  listing,
  onFavoriteToggle,
  isFavorite = false
}) => {
  const { t } = useTranslation();
  
  const {
    id,
    title,
    price,
    currency,
    location,
    year,
    mileage,
    brand,
    model,
    images,
    bodyType,
    engineType,
    transmission,
    condition,
    seller
  } = listing;

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formattedPrice = new Intl.NumberFormat('ru-RU').format(price);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–µ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formattedMileage = mileage ? new Intl.NumberFormat('ru-RU').format(mileage) : null;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleFavoriteClick = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (onFavoriteToggle) {
      onFavoriteToggle(id);
    }
  };

  return (
    <Link to={`/transport/listing/${id}`}>
      <Card className="transport-card overflow-hidden hover:shadow-md transition-shadow duration-300 h-full">
        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ */}
        <div className="relative h-48">
          <img 
            src={images[0] || '/placeholder.svg'} 
            alt={`${brand} ${model}`} 
            className="w-full h-full object-cover"
          />
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–∏—Å–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
          {images.length > 1 && (
            <span className="absolute bottom-2 left-2 bg-black bg-opacity-60 text-white text-xs px-2 py-1 rounded">
              {images.length} —Ñ–æ—Ç–æ
            </span>
          )}
          
          {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ */}
          <Button
            variant="ghost"
            size="icon"
            className={`absolute top-2 right-2 rounded-full ${isFavorite ? 'text-red-500' : 'text-white'} bg-black bg-opacity-40 hover:bg-opacity-60`}
            onClick={handleFavoriteClick}
          >
            <Heart className={`h-4 w-4 ${isFavorite ? 'fill-current' : ''}`} />
          </Button>
          
          {/* –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –¥–∏–ª–µ—Ä–∞ */}
          {seller.type === 'dealer' && (
            <Badge className="absolute top-2 left-2 bg-green-600 text-xs">
              –î–∏–ª–µ—Ä
            </Badge>
          )}
          
          {condition === 'new' && (
            <Badge className="absolute top-8 left-2 bg-blue-600 text-xs">
              –ù–æ–≤—ã–π
            </Badge>
          )}
        </div>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ä–µ–¥—Å—Ç–≤–µ */}
        <CardContent className="p-3">
          <div className="mb-2">
            <h3 className="text-sm font-semibold line-clamp-2 mb-1">
              {title || `${brand} ${model}`}
            </h3>
            <p className="text-lg font-bold text-gray-900">
              {formattedPrice} {currency === 'USD' ? '$' : currency === 'EUR' ? '‚Ç¨' : '‚Ç∏'}
            </p>
          </div>
          
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
          <div className="grid grid-cols-2 gap-x-2 gap-y-1 mb-2 text-xs text-gray-600">
            <div className="flex items-center">
              <span className="mr-1">üìÖ</span> {year}
            </div>
            
            {mileage !== undefined && (
              <div className="flex items-center">
                <span className="mr-1">üõ£Ô∏è</span>
                {formattedMileage} –∫–º
              </div>
            )}
            
            {bodyType && (
              <div className="flex items-center">
                <span className="mr-1">üöò</span>
                {bodyType}
              </div>
            )}
            
            {engineType && (
              <div className="flex items-center">
                <span className="mr-1">‚öôÔ∏è</span>
                {engineType}
              </div>
            )}
          </div>
          
          {/* –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ */}
          <div className="flex items-center text-xs text-gray-500 mb-2">
            <MapPin className="h-3 w-3 mr-1" />
            {location}
          </div>
          
          {/* –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ */}
          <div className="text-xs text-gray-400">
            {new Date(listing.createdAt).toLocaleDateString('ru-RU')}
          </div>
        </CardContent>
      </Card>
    </Link>
  );
};

export default TransportCardCompact;
