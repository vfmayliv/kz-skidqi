
import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { ListingCard } from '@/components/ListingCard';
import { useListings } from '@/hooks/useListings';
import { useAppWithTranslations } from '@/stores/useAppStore';

export function EnhancedFeaturedListings() {
  const { t, language } = useAppWithTranslations();
  const [activeTab, setActiveTab] = useState<string>('featured');
  const { getListings, listings, loading, error } = useListings();
  const [isInitialized, setIsInitialized] = useState(false);
  
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (!isInitialized) {
      console.log('üè† –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
      getListings({}, 'newest', 16, 0).finally(() => {
        setIsInitialized(true);
      });
    }
  }, [isInitialized, getListings]);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ"
  const featuredListings = listings.filter(listing => listing.is_premium);
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ù–æ–≤—ã–µ"
  const latestListings = [...listings].sort((a, b) => 
    new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
  );

  // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É ListingCard
  const adaptListing = (listing: any) => ({
    id: listing.id,
    title: listing.title,
    description: listing.description,
    imageUrl: listing.images?.[0] || '/placeholder.svg',
    originalPrice: listing.regular_price || 0,
    discountPrice: listing.discount_price || listing.regular_price || 0,
    discount: listing.discount_percent || 0,
    city: listing.cities?.name_ru || '–ù–µ —É–∫–∞–∑–∞–Ω',
    categoryId: listing.category_id?.toString() || '',
    subcategoryId: '',
    isFeatured: listing.is_premium || false,
    createdAt: listing.created_at,
    views: listing.views || 0
  });

  if (error) {
    console.error('‚ùå Error loading listings:', error);
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Center the heading and position it above the tabs */}
      <h2 className="text-2xl font-bold mb-4 text-center">{t('listings')}</h2>
      
      <Tabs defaultValue="featured" onValueChange={setActiveTab} value={activeTab}>
        <div className="flex justify-between items-center mb-6">
          <TabsList>
            <TabsTrigger value="featured">
              <span className="hidden md:inline">{t('featuredAds')}</span>
              <span className="md:hidden">{language === 'ru' ? '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ' : '–¢–∞“£–¥–∞—É–ª—ã'}</span>
            </TabsTrigger>
            <TabsTrigger value="latest">
              <span className="hidden md:inline">{t('latestAds')}</span>
              <span className="md:hidden">{language === 'ru' ? '–ù–æ–≤—ã–µ' : '–ñ–∞“£–∞'}</span>
            </TabsTrigger>
          </TabsList>
          
          <Button variant="link" asChild>
            <Link to="/search">
              <span className="hidden md:inline">{t('allAds')}</span>
              <span className="md:hidden">{language === 'ru' ? '–í—Å–µ' : '–ë–∞—Ä–ª—ã“õ'}</span>
            </Link>
          </Button>
        </div>

        {error && (
          <div className="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
            {language === 'ru' ? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:' : '–ñ“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ:'} {error}
          </div>
        )}
        
        <TabsContent value="featured" className="mt-0">
          {loading && !isInitialized ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto"></div>
              <p className="mt-4 text-gray-600">
                {language === 'ru' ? '–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase...' : 'Supabase –¥–µ—Ä–µ–≥—ñ–Ω–µ–Ω –¥–µ—Ä–µ–∫—Ç–µ—Ä –∂“Ø–∫—Ç–µ—É...'}
              </p>
            </div>
          ) : (
            <>
              {/* Grid with 4 columns */}
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6">
                {featuredListings.slice(0, 8).map(listing => (
                  <ListingCard key={listing.id} listing={adaptListing(listing)} />
                ))}
              </div>
              
              {!loading && featuredListings.length === 0 && isInitialized && (
                <div className="text-center py-8">
                  <p className="text-gray-500">
                    {language === 'ru' ? '–ü—Ä–µ–º–∏—É–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–ü—Ä–µ–º–∏—É–º —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã'}
                  </p>
                </div>
              )}
            </>
          )}
        </TabsContent>
        
        <TabsContent value="latest" className="mt-0">
          {loading && !isInitialized ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto"></div>
              <p className="mt-4 text-gray-600">
                {language === 'ru' ? '–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase...' : 'Supabase –¥–µ—Ä–µ–≥—ñ–Ω–µ–Ω –¥–µ—Ä–µ–∫—Ç–µ—Ä –∂“Ø–∫—Ç–µ—É...'}
              </p>
            </div>
          ) : (
            <>
              {/* Grid with 4 columns */}
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6">
                {latestListings.slice(0, 8).map(listing => (
                  <ListingCard key={listing.id} listing={adaptListing(listing)} />
                ))}
              </div>
              
              {!loading && latestListings.length === 0 && isInitialized && (
                <div className="text-center py-8">
                  <p className="text-gray-500">
                    {language === 'ru' ? '–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã'}
                  </p>
                </div>
              )}
            </>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
}
