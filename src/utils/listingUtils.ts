import { v4 as uuidv4 } from 'uuid';
import { supabase } from '@/lib/supabase';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Supabase
interface CreateListingData {
  title: string;
  description: string;
  regular_price: number;
  discount_price?: number;
  category_id: number;
  user_id: string;
  city_id?: number;
  region_id?: number;
  microdistrict_id?: number;
  address?: string;
  latitude?: number;
  longitude?: number;
  images: string[];
  status: string;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Supabase Storage
export async function uploadImageToSupabase(file: File): Promise<string | null> {
  try {
    const fileExt = file.name.split('.').pop();
    const fileName = `${uuidv4()}.${fileExt}`;
    const filePath = `listings/${fileName}`;
    
    console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Supabase Storage:', filePath);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è RLS –ø–æ–ª–∏—Ç–∏–∫
    const { error: uploadError } = await supabase.storage
      .from('listings')
      .upload(filePath, file, {
        metadata: {
          uploader: (await supabase.auth.getUser()).data.user?.id
        }
      });
    
    if (uploadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', uploadError);
      return null;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const { data } = supabase.storage
      .from('listings')
      .getPublicUrl(filePath);
    
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', data.publicUrl);
    return data.publicUrl;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    return null;
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Supabase Storage
export async function uploadImagestoSupabase(files: File[]): Promise<string[]> {
  const uploadPromises = files.map(file => uploadImageToSupabase(file));
  const results = await Promise.all(uploadPromises);
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º null-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏)
  return results.filter(url => url !== null) as string[];
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Supabase
export async function saveListingToSupabase(listing: CreateListingData): Promise<string | null> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
      return null;
    }

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ Supabase:', listing);

    const { data, error } = await supabase
      .from('listings')
      .insert([{
        ...listing,
        user_id: user.id,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      }])
      .select('id')
      .single();
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
      return null;
    }
    
    console.log('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID:', data.id);
    return data.id;
  } catch (error) {
    console.error('üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
    return null;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Supabase
export async function updateListingInSupabase(id: string, listing: Partial<CreateListingData>): Promise<boolean> {
  try {
    const { error } = await supabase
      .from('listings')
      .update({
        ...listing,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ localStorage (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–æ–π)
export function saveListingToLocalStorage(listing: any) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userListingsString = localStorage.getItem('userListings');
    const userListings: any[] = userListingsString ? JSON.parse(userListingsString) : [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID
    const existingIndex = userListings.findIndex(item => item.id === listing.id);
    
    if (existingIndex >= 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      userListings[existingIndex] = {
        ...listing,
        updatedAt: new Date().toISOString()
      };
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
      userListings.push({
        ...listing,
        id: listing.id || uuidv4(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ localStorage
    localStorage.setItem('userListings', JSON.stringify(userListings));
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ localStorage:', error);
    return false;
  }
}
