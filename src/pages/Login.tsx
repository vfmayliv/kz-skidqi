
import { useState, useEffect } from 'react';
import { Header } from '@/components/Header';
import { Footer } from '@/components/Footer';
import { useAppContext } from '@/contexts/AppContext';
import { useSupabase } from '@/contexts/SupabaseContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Link, useNavigate, useSearchParams } from 'react-router-dom';
import { useToast } from '@/hooks/useToast';

const Login = () => {
  const { language } = useAppContext();
  const { signIn, user, loading } = useSupabase();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [searchParams] = useSearchParams();
  const isOwnerLogin = searchParams.get('owner') === 'true';
  
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    if (user && !loading) {
      navigate('/profile');
    }
  }, [user, loading, navigate]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –≤—Ö–æ–¥–∞
  useEffect(() => {
    setEmail('');
    setPassword('');
  }, [isOwnerLogin]);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞:', email);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!email || !password) {
      const title = language === 'ru' ? '–û—à–∏–±–∫–∞' : '“ö–∞—Ç–µ';
      const description = language === 'ru' 
        ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' 
        : '–ë–∞—Ä–ª—ã“õ ”©—Ä—ñ—Å—Ç–µ—Ä–¥—ñ —Ç–æ–ª—Ç—ã—Ä—ã“£—ã–∑';
        
      toast({
        title,
        description,
        variant: 'destructive'
      });
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤—Ö–æ–¥–∞ –≤ Supabase...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Supabase
      const { error } = await signIn(email, password);
      
      console.log('üì® –û—Ç–≤–µ—Ç –æ—Ç Supabase:', { error });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        let errorMessage = language === 'ru' 
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' 
          : '–ö—ñ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã';
          
        if (error.message.includes('Invalid login credentials')) {
          errorMessage = language === 'ru' 
            ? '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
            : '“ö–∞—Ç–µ email –Ω–µ–º–µ—Å–µ “õ“±–ø–∏—è —Å”©–∑';
        } else if (error.message.includes('Email not confirmed')) {
          errorMessage = language === 'ru' 
            ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º' 
            : '–ö—ñ—Ä—É –∞–ª–¥—ã–Ω–¥–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞“£—ã–∑–¥—ã —Ä–∞—Å—Ç–∞“£—ã–∑';
        } else if (error.message.includes('Too many requests')) {
          errorMessage = language === 'ru' 
            ? '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' 
            : '–¢—ã–º –∫”©–ø –∫—ñ—Ä—É ”ô—Ä–µ–∫–µ—Ç—ñ. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ –∫”©—Ä—ñ“£—ñ–∑';
        }
        
        toast({
          title: language === 'ru' ? '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' : '–ö—ñ—Ä—É “õ–∞—Ç–µ—Å—ñ',
          description: errorMessage,
          variant: 'destructive'
        });
        
        setIsSubmitting(false);
        return;
      }
      
      console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
      toast({
        title: language === 'ru' ? '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥' : '–°”ô—Ç—Ç—ñ –∫—ñ—Ä—É',
        description: language === 'ru' 
          ? '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç' 
          : '–ê–∫–∫–∞—É–Ω—Ç“õ–∞ —Å”ô—Ç—Ç—ñ –∫—ñ—Ä–¥—ñ“£—ñ–∑'
      });
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ useEffect
      
    } catch (error) {
      console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      
      toast({
        title: language === 'ru' ? '–û—à–∏–±–∫–∞' : '“ö–∞—Ç–µ',
        description: language === 'ru' 
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' 
          : '–ö“Ø—Ç–ø–µ–≥–µ–Ω “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.',
        variant: 'destructive'
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
  if (loading) {
    return (
      <div className="min-h-screen flex flex-col">
        <Header />
        <main className="flex-1 container mx-auto px-4 py-8 flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">
              {language === 'ru' ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...'}
            </p>
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-8 flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl font-bold">
              {isOwnerLogin 
                ? (language === 'ru' ? '–í—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' : '”ò–∫—ñ–º—à—ñ –∫—ñ—Ä—ñ—Å—ñ')
                : (language === 'ru' ? '–í—Ö–æ–¥' : '–ö—ñ—Ä—É')
              }
            </CardTitle>
            <CardDescription>
              {isOwnerLogin
                ? (language === 'ru' 
                  ? '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
                  : '”ò–∫—ñ–º—à—ñ —Ç–∞“õ—Ç–∞—Å—ã–Ω–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É “Ø—à—ñ–Ω –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑')
                : (language === 'ru' 
                  ? '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç'
                  : '–ê–∫–∫–∞—É–Ω—Ç“õ–∞ –∫—ñ—Ä—É “Ø—à—ñ–Ω –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑')
              }
            </CardDescription>
          </CardHeader>
          <form onSubmit={handleLogin}>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="email">
                  {isOwnerLogin 
                    ? (language === 'ru' ? '–õ–æ–≥–∏–Ω' : '–õ–æ–≥–∏–Ω')
                    : 'Email'
                  }
                </Label>
                <Input 
                  id="email" 
                  type={isOwnerLogin ? "text" : "email"}
                  placeholder={isOwnerLogin ? "ceo" : "email@example.com"}
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  disabled={isSubmitting}
                />
              </div>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label htmlFor="password">
                    {language === 'ru' ? '–ü–∞—Ä–æ–ª—å' : '“ö“±–ø–∏—è —Å”©–∑'}
                  </Label>
                  {!isOwnerLogin && (
                    <Link 
                      to="/reset-password"
                      className="text-sm text-primary hover:underline"
                    >
                      {language === 'ru' ? '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?' : '“ö“±–ø–∏—è —Å”©–∑–¥—ñ “±–º—ã—Ç—Ç—ã“£—ã–∑ –±–∞?'}
                    </Link>
                  )}
                </div>
                <Input 
                  id="password" 
                  type="password" 
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  disabled={isSubmitting}
                />
              </div>
            </CardContent>
            <CardFooter className="flex flex-col space-y-4">
              <Button 
                type="submit" 
                className="w-full"
                disabled={isSubmitting}
              >
                {isSubmitting
                  ? (language === 'ru' ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...' : '–ö—ñ—Ä—É –∂“Ø—Ä–≥—ñ–∑—ñ–ª—É–¥–µ...')
                  : (language === 'ru' ? '–í–æ–π—Ç–∏' : '–ö—ñ—Ä—É')
                }
              </Button>
              
              {!isOwnerLogin && (
                <div className="text-center text-sm">
                  {language === 'ru' ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?' : '–ê–∫–∫–∞—É–Ω—Ç—ã“£—ã–∑ –∂–æ“õ –ø–∞?'}{' '}
                  <Link 
                    to="/register"
                    className="text-primary hover:underline"
                  >
                    {language === 'ru' ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–¢—ñ—Ä–∫–µ–ª—É'}
                  </Link>
                </div>
              )}
            </CardFooter>
          </form>
        </Card>
      </main>
      <Footer />
    </div>
  );
};

export default Login;
